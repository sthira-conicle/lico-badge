{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nexport default {\n  name: \"ThreeModelViewer\",\n  data() {\n    return {\n      threejs: null,\n      scene: null,\n      camera: null,\n      mixers: [],\n      neckBone: null,\n      mouse: new THREE.Vector2(),\n      rafId: null\n    };\n  },\n  methods: {\n    initialize() {\n      // Create renderer\n      this.threejs = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      this.threejs.shadowMap.enabled = true;\n      this.threejs.shadowMap.type = THREE.PCFSoftShadowMap;\n      this.threejs.setPixelRatio(window.devicePixelRatio);\n      this.threejs.setSize(1280, 1280);\n\n      // Attach renderer to DOM\n      this.$refs.threeContainer.appendChild(this.threejs.domElement);\n\n      // Camera setup\n      const fov = 50;\n      const aspect = 1;\n      const near = 1;\n      const far = 1000.0;\n      this.camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n      this.camera.position.set(0, 0.5, 2.3);\n      this.camera.lookAt(new THREE.Vector3(0, 0.6, 0));\n\n      // Scene setup\n      this.scene = new THREE.Scene();\n\n      // Lights\n      let light = new THREE.DirectionalLight(0xFFFFFF, 4.0);\n      light.position.set(5, 10, 7.5);\n      light.target.position.set(0, 0, 0);\n      light.castShadow = true;\n      light.shadow.bias = 0;\n      light.shadow.mapSize.width = 2048;\n      light.shadow.mapSize.height = 2048;\n      light.shadow.camera.near = 1;\n      light.shadow.camera.far = 500;\n      light.shadow.camera.left = -5;\n      light.shadow.camera.right = 5;\n      light.shadow.camera.top = 5;\n      light.shadow.camera.bottom = -5;\n      this._scene.add(light);\n      light = new THREE.AmbientLight(0x846E62, 5.0);\n      this._scene.add(light);\n\n      // Load model\n      this.loadModel();\n\n      // Mouse move listener\n      this.threejs.domElement.addEventListener(\"mousemove\", this.onMouseMove, false);\n\n      // Start render loop\n      this.raf();\n    },\n    loadModel() {\n      const loader = new GLTFLoader();\n      console.log(loader);\n      loader.load(\"/lico-actions-subd.glb\", gltf => {\n        gltf.scene.traverse(c => {\n          if (c.material) {\n            c.material.side = THREE.FrontSide;\n            c.material.depthWrite = true;\n          }\n          if (c.name && c.name == \"floor\") {\n            c.material.color.set(0x00ff00);\n          }\n          c.castShadow = c.name !== \"floor\";\n        });\n        const idsToRemove = [];\n        gltf.animations[0].tracks.forEach((t, i) => {\n          if (t.name.includes(\"mixamorigHead.quaternion\")) {\n            idsToRemove.push(i);\n          }\n        });\n        idsToRemove.forEach(i => {\n          gltf.animations[0].tracks.splice(i, 1);\n        });\n        this.scene.add(gltf.scene);\n        this.neckBone = gltf.scene.getObjectByName(\"mixamorigHead\");\n        if (gltf.animations.length > 0) {\n          const mixer = new THREE.AnimationMixer(gltf.scene);\n          const action = mixer.clipAction(gltf.animations[0]);\n          action.play();\n\n          // Update the mixer on every frame\n          this.mixers = [mixer];\n        }\n      });\n    },\n    onMouseMove(event) {\n      this.mouse.set(event.clientX / event.currentTarget.clientWidth * 2 - 1, -(event.clientY / event.currentTarget.clientHeight) * 2 + 1);\n      if (this.neckBone) {\n        this.neckBone.lookAt(this.mouse.x / 2, (this.mouse.y + 0.8) / 2, 1);\n      }\n    },\n    raf() {\n      this.rafId = requestAnimationFrame(t => {\n        if (this.previousRAF === null) {\n          this.previousRAF = t;\n        }\n        this.raf();\n        const timeElapsed = t - this.previousRAF;\n        this.previousRAF = t;\n        this._Step(timeElapsed);\n        this.threejs.render(this.scene, this.camera);\n      });\n    },\n    _Step(timeElapsed) {\n      const delta = timeElapsed * 0.001;\n      if (this.mixers.length > 0) {\n        this.mixers[0].update(delta);\n      }\n    },\n    cleanup() {\n      cancelAnimationFrame(this.rafId);\n      this.threejs.domElement.removeEventListener(\"mousemove\", this.onMouseMove);\n      this.threejs.dispose();\n      this.scene = null;\n      this.camera = null;\n      this.mixers = [];\n    }\n  },\n  mounted() {\n    this.initialize();\n  },\n  beforeUnmount() {\n    this.cleanup();\n  }\n};","map":{"version":3,"names":["THREE","GLTFLoader","name","data","threejs","scene","camera","mixers","neckBone","mouse","Vector2","rafId","methods","initialize","WebGLRenderer","antialias","shadowMap","enabled","type","PCFSoftShadowMap","setPixelRatio","window","devicePixelRatio","setSize","$refs","threeContainer","appendChild","domElement","fov","aspect","near","far","PerspectiveCamera","position","set","lookAt","Vector3","Scene","light","DirectionalLight","target","castShadow","shadow","bias","mapSize","width","height","left","right","top","bottom","_scene","add","AmbientLight","loadModel","addEventListener","onMouseMove","raf","loader","console","log","load","gltf","traverse","c","material","side","FrontSide","depthWrite","color","idsToRemove","animations","tracks","forEach","t","i","includes","push","splice","getObjectByName","length","mixer","AnimationMixer","action","clipAction","play","event","clientX","currentTarget","clientWidth","clientY","clientHeight","x","y","requestAnimationFrame","previousRAF","timeElapsed","_Step","render","delta","update","cleanup","cancelAnimationFrame","removeEventListener","dispose","mounted","beforeUnmount"],"sources":["src/components/LicoBadge.vue"],"sourcesContent":["<template>\n  <div ref=\"threeContainer\" class=\"lico-badge three-container\"></div>\n</template>\n\n<script>\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nexport default {\n  name: \"ThreeModelViewer\",\n  data() {\n    return {\n      threejs: null,\n      scene: null,\n      camera: null,\n      mixers: [],\n      neckBone: null,\n      mouse: new THREE.Vector2(),\n      rafId: null,\n    };\n  },\n  methods: {\n    initialize() {\n      // Create renderer\n      this.threejs = new THREE.WebGLRenderer({\n        antialias: true,\n      });\n      this.threejs.shadowMap.enabled = true;\n      this.threejs.shadowMap.type = THREE.PCFSoftShadowMap;\n      this.threejs.setPixelRatio(window.devicePixelRatio);\n      this.threejs.setSize(1280,1280);\n\n      // Attach renderer to DOM\n      this.$refs.threeContainer.appendChild(this.threejs.domElement);\n\n      // Camera setup\n      const fov = 50;\n      const aspect = 1;\n      const near = 1;\n      const far = 1000.0;\n      this.camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n      this.camera.position.set(0, 0.5, 2.3);\n      this.camera.lookAt(new THREE.Vector3(0, 0.6, 0));\n\n      // Scene setup\n      this.scene = new THREE.Scene();\n\n      // Lights\n      let light = new THREE.DirectionalLight(0xFFFFFF, 4.0);\n    light.position.set(5, 10, 7.5);\n    light.target.position.set(0, 0, 0);\n    light.castShadow = true;\n    light.shadow.bias = 0;\n    light.shadow.mapSize.width = 2048;\n    light.shadow.mapSize.height = 2048;\n    light.shadow.camera.near = 1;\n    light.shadow.camera.far = 500;\n    light.shadow.camera.left = -5;\n    light.shadow.camera.right = 5;\n    light.shadow.camera.top = 5;\n    light.shadow.camera.bottom = -5;\n    this._scene.add(light);\n\n    light = new THREE.AmbientLight(0x846E62, 5.0);\n    this._scene.add(light);\n\n\n      // Load model\n      this.loadModel();\n\n      // Mouse move listener\n      this.threejs.domElement.addEventListener(\n        \"mousemove\",\n        this.onMouseMove,\n        false\n      );\n\n\n      // Start render loop\n      this.raf();\n\n      \n    },\n    loadModel() {\n      const loader = new GLTFLoader();\n      console.log(loader);\n      loader.load(\"/lico-actions-subd.glb\", (gltf) => {\n        gltf.scene.traverse((c) => {\n          if (c.material) {\n            c.material.side = THREE.FrontSide;\n            c.material.depthWrite = true;\n          }\n\n          if (c.name && c.name == \"floor\") {\n            c.material.color.set(0x00ff00);\n          }\n\n          c.castShadow = c.name !== \"floor\";\n        });\n\n          const idsToRemove = [];\n          gltf.animations[0].tracks.forEach((t, i) => {\n            if (t.name.includes(\"mixamorigHead.quaternion\")) {\n              idsToRemove.push(i);\n            }\n          });\n          idsToRemove.forEach((i) => {\n            gltf.animations[0].tracks.splice(i, 1);\n          });\n\n        this.scene.add(gltf.scene);\n\n        this.neckBone = gltf.scene.getObjectByName(\"mixamorigHead\");\n\n        if (gltf.animations.length > 0) {\n          const mixer = new THREE.AnimationMixer(gltf.scene);\n          const action = mixer.clipAction(gltf.animations[0]);\n          action.play();\n\n          // Update the mixer on every frame\n          this.mixers = [mixer];\n        }\n      });\n    },\n    onMouseMove(event) {\n        this.mouse.set(\n          (event.clientX / event.currentTarget.clientWidth) * 2 - 1,\n          -(event.clientY / event.currentTarget.clientHeight) * 2 + 1\n        );\n        if (this.neckBone) {\n          this.neckBone.lookAt(this.mouse.x / 2, (this.mouse.y + 0.8) / 2, 1);\n        }\n    },\n    raf() {\n      this.rafId = requestAnimationFrame((t) => {\n        if (this.previousRAF === null) {\n          this.previousRAF = t;\n        }\n\n        this.raf();\n\n        const timeElapsed = t - this.previousRAF;\n        this.previousRAF = t;\n\n        this._Step(timeElapsed);\n        this.threejs.render(this.scene, this.camera);\n      });\n    },\n    _Step(timeElapsed) {\n      const delta = timeElapsed * 0.001;\n      if (this.mixers.length > 0) {\n        this.mixers[0].update(delta);\n      }\n    },\n    cleanup() {\n      cancelAnimationFrame(this.rafId);\n      this.threejs.domElement.removeEventListener(\n        \"mousemove\",\n        this.onMouseMove\n      );\n      this.threejs.dispose();\n      this.scene = null;\n      this.camera = null;\n      this.mixers = [];\n    },\n  },\n  mounted() {\n    this.initialize();\n  },\n  beforeUnmount() {\n    this.cleanup();\n  },\n};\n</script>\n\n<style>\n.three-container {\n  width: 640px;\n  height: 640px;\n  border-radius: 9999px;\n  overflow: hidden;\n}\n.three-container canvas{\n  display: block;\n  width: 1280px;\n  height: 1280px;\n  position: relative;\n  left: -320px;\n  top: -120px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}