{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nexport default {\n  name: \"ThreeModelViewer\",\n  data() {\n    return {\n      threejs: null,\n      scene: null,\n      camera: null,\n      mixers: [],\n      playing: 0,\n      headAction: [0],\n      neckBone: null,\n      mouse: new THREE.Vector2(),\n      rafId: null\n    };\n  },\n  methods: {\n    initialize() {\n      // Create renderer\n      this.threejs = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      this.threejs.shadowMap.enabled = true;\n      this.threejs.shadowMap.type = THREE.PCFSoftShadowMap;\n      this.threejs.setPixelRatio(window.devicePixelRatio);\n      this.threejs.setSize(window.innerWidth, window.innerHeight);\n\n      // Attach renderer to DOM\n      this.$refs.threeContainer.appendChild(this.threejs.domElement);\n\n      // Camera setup\n      const fov = 50;\n      const aspect = window.innerWidth / window.innerHeight;\n      const near = 1;\n      const far = 1000.0;\n      this.camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n      this.camera.position.set(0, 0.5, 2.3);\n      this.camera.lookAt(new THREE.Vector3(0, 0.6, 0));\n\n      // Scene setup\n      this.scene = new THREE.Scene();\n\n      // Lights\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 4.0);\n      directionalLight.position.set(5, 10, 7.5);\n      directionalLight.castShadow = true;\n      this.scene.add(directionalLight);\n      const ambientLight = new THREE.AmbientLight(0x846e62, 5.0);\n      this.scene.add(ambientLight);\n\n      // Resize listener\n      window.addEventListener(\"resize\", this.onWindowResize, false);\n\n      // Load model\n      this.loadModel();\n\n      // Mouse move listener\n      this.threejs.domElement.addEventListener(\"mousemove\", this.onMouseMove, false);\n\n      // Start render loop\n      this.raf();\n    },\n    loadModel() {\n      const loader = new GLTFLoader();\n      loader.load(\"lico-badge/public/lico-actions-subd.glb\", gltf => {\n        gltf.scene.traverse(c => {\n          if (c.material) {\n            c.material.side = THREE.FrontSide;\n            c.material.depthWrite = true;\n          }\n          c.castShadow = c.name !== \"floor\";\n        });\n        this.headAction.forEach(i => {\n          const idsToRemove = [];\n          gltf.animations[i].tracks.forEach((t, j) => {\n            if (t.name.includes(\"mixamorigHead.quaternion\")) {\n              idsToRemove.push(j);\n            }\n          });\n          idsToRemove.forEach(j => {\n            gltf.animations[i].tracks.splice(j, 1);\n          });\n        });\n        const mixer = new THREE.AnimationMixer(gltf.scene);\n        this.mixers.push(mixer);\n        gltf.animations.forEach((element, i) => {\n          this.action[i] = mixer.clipAction(element);\n        });\n        this.action[0].play();\n        this.playing = 0;\n        this.scene.add(gltf.scene);\n        this.neckBone = gltf.scene.getObjectByName(\"mixamorigHead\");\n      });\n    },\n    onMouseMove(event) {\n      if (this.headAction.includes(this.playing)) {\n        this.mouse.set(event.clientX / event.currentTarget.clientWidth * 2 - 1, -(event.clientY / event.currentTarget.clientHeight) * 2 + 1);\n        if (this.neckBone) {\n          this.neckBone.lookAt(this.mouse.x / 2, (this.mouse.y + 0.8) / 2, 1);\n        }\n      }\n    },\n    onWindowResize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.threejs.setSize(window.innerWidth, window.innerHeight);\n    },\n    raf() {\n      this.rafId = requestAnimationFrame(t => {\n        this.raf();\n        if (this.mixers) {\n          const delta = t * 0.001;\n          this.mixers.forEach(mixer => mixer.update(delta));\n        }\n        this.threejs.render(this.scene, this.camera);\n      });\n    },\n    cleanup() {\n      cancelAnimationFrame(this.rafId);\n      window.removeEventListener(\"resize\", this.onWindowResize);\n      this.threejs.domElement.removeEventListener(\"mousemove\", this.onMouseMove);\n      this.threejs.dispose();\n      this.scene = null;\n      this.camera = null;\n      this.mixers = [];\n    }\n  },\n  mounted() {\n    this.initialize();\n  },\n  beforeUnmount() {\n    this.cleanup();\n  }\n};","map":{"version":3,"names":["THREE","GLTFLoader","name","data","threejs","scene","camera","mixers","playing","headAction","neckBone","mouse","Vector2","rafId","methods","initialize","WebGLRenderer","antialias","shadowMap","enabled","type","PCFSoftShadowMap","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","$refs","threeContainer","appendChild","domElement","fov","aspect","near","far","PerspectiveCamera","position","set","lookAt","Vector3","Scene","directionalLight","DirectionalLight","castShadow","add","ambientLight","AmbientLight","addEventListener","onWindowResize","loadModel","onMouseMove","raf","loader","load","gltf","traverse","c","material","side","FrontSide","depthWrite","forEach","i","idsToRemove","animations","tracks","t","j","includes","push","splice","mixer","AnimationMixer","element","action","clipAction","play","getObjectByName","event","clientX","currentTarget","clientWidth","clientY","clientHeight","x","y","updateProjectionMatrix","requestAnimationFrame","delta","update","render","cleanup","cancelAnimationFrame","removeEventListener","dispose","mounted","beforeUnmount"],"sources":["src/components/LicoBadge.vue"],"sourcesContent":["<template>\n  <div ref=\"threeContainer\" class=\"lico-badge three-container\"></div>\n</template>\n\n<script>\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nexport default {\n  name: \"ThreeModelViewer\",\n  data() {\n    return {\n      threejs: null,\n      scene: null,\n      camera: null,\n      mixers: [],\n      playing: 0,\n      headAction: [0],\n      neckBone: null,\n      mouse: new THREE.Vector2(),\n      rafId: null,\n    };\n  },\n  methods: {\n    initialize() {\n      // Create renderer\n      this.threejs = new THREE.WebGLRenderer({\n        antialias: true,\n      });\n      this.threejs.shadowMap.enabled = true;\n      this.threejs.shadowMap.type = THREE.PCFSoftShadowMap;\n      this.threejs.setPixelRatio(window.devicePixelRatio);\n      this.threejs.setSize(window.innerWidth, window.innerHeight);\n\n      // Attach renderer to DOM\n      this.$refs.threeContainer.appendChild(this.threejs.domElement);\n\n      // Camera setup\n      const fov = 50;\n      const aspect = window.innerWidth / window.innerHeight;\n      const near = 1;\n      const far = 1000.0;\n      this.camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n      this.camera.position.set(0, 0.5, 2.3);\n      this.camera.lookAt(new THREE.Vector3(0, 0.6, 0));\n\n      // Scene setup\n      this.scene = new THREE.Scene();\n\n      // Lights\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 4.0);\n      directionalLight.position.set(5, 10, 7.5);\n      directionalLight.castShadow = true;\n      this.scene.add(directionalLight);\n\n      const ambientLight = new THREE.AmbientLight(0x846e62, 5.0);\n      this.scene.add(ambientLight);\n\n      // Resize listener\n      window.addEventListener(\"resize\", this.onWindowResize, false);\n\n      // Load model\n      this.loadModel();\n\n      // Mouse move listener\n      this.threejs.domElement.addEventListener(\n        \"mousemove\",\n        this.onMouseMove,\n        false\n      );\n\n      // Start render loop\n      this.raf();\n    },\n    loadModel() {\n      const loader = new GLTFLoader();\n      loader.load(\"lico-badge/public/lico-actions-subd.glb\", (gltf) => {\n        gltf.scene.traverse((c) => {\n          if (c.material) {\n            c.material.side = THREE.FrontSide;\n            c.material.depthWrite = true;\n          }\n          c.castShadow = c.name !== \"floor\";\n        });\n\n        this.headAction.forEach((i) => {\n          const idsToRemove = [];\n          gltf.animations[i].tracks.forEach((t, j) => {\n            if (t.name.includes(\"mixamorigHead.quaternion\")) {\n              idsToRemove.push(j);\n            }\n          });\n          idsToRemove.forEach((j) => {\n            gltf.animations[i].tracks.splice(j, 1);\n          });\n        });\n\n        const mixer = new THREE.AnimationMixer(gltf.scene);\n        this.mixers.push(mixer);\n        gltf.animations.forEach((element, i) => {\n          this.action[i] = mixer.clipAction(element);\n        });\n        this.action[0].play();\n        this.playing = 0;\n\n        this.scene.add(gltf.scene);\n        this.neckBone = gltf.scene.getObjectByName(\"mixamorigHead\");\n      });\n    },\n    onMouseMove(event) {\n      if (this.headAction.includes(this.playing)) {\n        this.mouse.set(\n          (event.clientX / event.currentTarget.clientWidth) * 2 - 1,\n          -(event.clientY / event.currentTarget.clientHeight) * 2 + 1\n        );\n        if (this.neckBone) {\n          this.neckBone.lookAt(this.mouse.x / 2, (this.mouse.y + 0.8) / 2, 1);\n        }\n      }\n    },\n    onWindowResize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.threejs.setSize(window.innerWidth, window.innerHeight);\n    },\n    raf() {\n      this.rafId = requestAnimationFrame((t) => {\n        this.raf();\n        if (this.mixers) {\n          const delta = t * 0.001;\n          this.mixers.forEach((mixer) => mixer.update(delta));\n        }\n        this.threejs.render(this.scene, this.camera);\n      });\n    },\n    cleanup() {\n      cancelAnimationFrame(this.rafId);\n      window.removeEventListener(\"resize\", this.onWindowResize);\n      this.threejs.domElement.removeEventListener(\n        \"mousemove\",\n        this.onMouseMove\n      );\n      this.threejs.dispose();\n      this.scene = null;\n      this.camera = null;\n      this.mixers = [];\n    },\n  },\n  mounted() {\n    this.initialize();\n  },\n  beforeUnmount() {\n    this.cleanup();\n  },\n};\n</script>\n\n<style>\n.three-container {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}